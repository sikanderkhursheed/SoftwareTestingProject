/*
 * This file was automatically generated by EvoSuite
 * Sat May 04 23:38:52 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SwissKnifeCheck_ESTest extends SwissKnifeCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SwissKnifeCheck swissKnifeCheck0 = new SwissKnifeCheck();
      swissKnifeCheck0.setMax(0);
      boolean boolean0 = swissKnifeCheck0.getCount();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DetailAST detailAST0 = new DetailAST();
      SwissKnifeCheck swissKnifeCheck0 = new SwissKnifeCheck();
      // Undeclared exception!
      try { 
        swissKnifeCheck0.visitToken(detailAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SwissKnifeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SwissKnifeCheck swissKnifeCheck0 = new SwissKnifeCheck();
      boolean boolean0 = swissKnifeCheck0.getCount();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SwissKnifeCheck swissKnifeCheck0 = new SwissKnifeCheck();
      int[] intArray0 = swissKnifeCheck0.getDefaultTokens();
      assertArrayEquals(new int[] {14}, intArray0);
      assertFalse(swissKnifeCheck0.getCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SwissKnifeCheck swissKnifeCheck0 = new SwissKnifeCheck();
      int[] intArray0 = swissKnifeCheck0.getAcceptableTokens();
      assertFalse(swissKnifeCheck0.getCount());
      assertArrayEquals(new int[] {14}, intArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SwissKnifeCheck swissKnifeCheck0 = new SwissKnifeCheck();
      int[] intArray0 = swissKnifeCheck0.getRequiredTokens();
      assertEquals(0, intArray0.length);
      assertFalse(swissKnifeCheck0.getCount());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SwissKnifeCheck swissKnifeCheck0 = new SwissKnifeCheck();
      assertFalse(swissKnifeCheck0.getCount());
      
      swissKnifeCheck0.setMax((-2662));
      boolean boolean0 = swissKnifeCheck0.getCount();
      assertTrue(boolean0);
  }
}
